#!/usr/bin/env bash

# Check for required tools
if ! command -v eksctl >/dev/null; then
  echo "* Can't find executable 'eksctl'" >&2
  exit 2
fi

# Helper functions

usage() {
  cat >&2 <<EOF
${0##*/}
                --cluster-env-file my-test-cluster.env

Cleans up the EKS cluster described by the specified env file and any files generated by 'setup-test-cluster.sh'

Required:
   --cluster-env-file           Path to the env file containing EKS cluster information targetted for clean up
EOF
}

required_arg() {
  local arg="${1:?}"
  local value="${2}"
  if [ -z "${value}" ]; then
    echo "ERROR: ${arg} is required" >&2
    exit 2
  fi
}

parse_args() {
  while [ ${#} -gt 0 ] ; do
    case "${1}" in
      --cluster-env-file ) shift; ENV_FILE="${1}" ;;

      --help ) usage; exit 0 ;;
      *)
        echo "ERROR: Unknown argument: ${1}" >&2
        usage
        exit 2
        ;;
    esac
    shift
  done

  # Required arguments
  required_arg "--cluster-env-file" "${ENV_FILE}"
}

exit_on_error() {
  local rc="${1:?}"
  local msg="${2:?}"

  if [ "${rc}" -ne 0 ]; then
    echo "${msg}" >&2
    exit 1
  fi
}

# Initial setup and checks
parse_args "${@}"

# Load the env file created by the 'setup-test-cluster' script, if it doesn't exist, exit
if [ -f "${ENV_FILE}" ]; then
  . "${ENV_FILE}"
else
  echo "* Failed to open env file at ${ENV_FILE}." >&2
  exit 1
fi

echo "Removing security group dependencies."
aws ec2 revoke-security-group-ingress \
  --region "${REGION}" \
  --group-id "${NODEGROUP_SG}" \
  --protocol tcp \
  --port 1-1024 \
  --source-group "${CONTROLPLANE_SG}"
exit_on_error ${?} "* Failed to remove nodegroup sg ingress rules"

aws ec2 revoke-security-group-egress \
  --region "${REGION}" \
  --group-id "${CONTROLPLANE_SG}" \
  --protocol tcp \
  --port 1-1024 \
  --source-group "${NODEGROUP_SG}"
exit_on_error ${?} "* Failed to remove control plane sg egress rules"

echo "Deleting the test cluster."
eksctl delete cluster -r "${REGION}" -n "${CLUSTER_NAME}"
exit_on_error ${?} "* Failed to delete ${CLUSTER_NAME} with eksctl, there might be leftover CloudFormation stacks that needs to be deleted. Look for eksctl-${CLUSTER_NAME}-*" >&2

echo "Deleting env file, userdata file, and kubeconfig file"
rm -f "${ENV_FILE}"
rm -f "${USERDATA_FILE}"
rm -f "${KUBECONFIG_FILE}"

echo "Clean up done."
