#!/usr/bin/env bash
#
# start-docker-daemon - Start up a docker daemon for the build environment
#
# Builds depend on a series of docker images and containers used to run builds
# for various stages of the system. In the CodeBuild task, the docker daemon
# must be started as part of the environment startup (in the buildspec) as the
# CodeBuild Agent does not execute an image's ENTRYPOINT.
#
# usage:
#
#     start-docker-daemon
#

if ! hash docker dockerd; then
    logger -s --no-act -t ERROR "missing required commands"
fi

# If not configured, we'll use the default docker daemon socket address.
export DOCKER_HOST="${DOCKER_HOST:-unix:///var/run/docker.sock}"
# Don't startup our own daemon if the environment has access configured for the
if docker version &>/dev/null; then
    logger -s --no-act -t INFO "delegating to running & configured dockerd (via $DOCKER_HOST)"
    exit 0
fi

# Also check to see if the daemon is running but we're unable to access it, the
# environment may already have docker daemon running but not fully configured
# for use.
if [[ -S "${DOCKER_HOST:+${DOCKER_HOST##unix://}}" ]]; then
    logger -s --no-act -t ERROR "unable to access running dockerd (via $DOCKER_HOST)"
    exit 1
fi

# Verify we're a user that can start the docker daemon (assuming for now that
# being root means that).
euid="$(id -u)"
if [[ "$euid" -ne 0 ]]; then
   logger -s --no-act -t ERROR "unable to start dockerd as non-root user (euid: $euid != 0)"
   exit 1
fi

# In all other cases, start the docker daemon
logger -s --no-act -t INFO "starting dockerd"
nohup dockerd \
    --host="$DOCKER_HOST" \
    &>/var/log/docker.log &
daemon_pid="$!"

sleep 1

if [[ ! -e "/proc/$daemon_pid" ]]; then
    logger -s --no-act -t ERROR "dockerd did not start"
    exit 1
fi

# Starting up the daemon asynchronously may take a moment or may fail to start
# in the background, tries are made to check in on the brief time between exec
# and the daemon ready to work.
#
# sleep interval before attempting each try
try_interval="0.1s"
# maximum try attempts that will be made
try_max_count=3
# try attempts
try_count=0

until docker info &>/dev/null; do
    ((try_count++))
    if [[ "$try_count" -gt "$try_max_count" ]]; then
        logger -s --no-act -t ERROR "dockerd start exceeded deadline (may be slow or failed to start, check logs)"
        if [[ -s "/var/log/docker.log" ]]; then
            sed 's/^/docker.log: /' /var/log/docker.log
        else
            logger -s --no-act -t WARN "dockerd logs are empty"
        fi
        exit 1
    fi
    sleep "$try_interval"
done
